{"version":3,"sources":["components/Buttons.tsx","components/Themes.tsx","components/Landing.tsx","components/Inputs.tsx","services/DartscoreService.ts","components/Create.tsx","components/Join.tsx","components/Lobby.tsx","hooks/useDartsGameState.ts","components/Cricket.tsx","hooks/updateDartState.ts","components/FiveOne.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","fonts/PressStart2P-Regular.ttf","index.tsx"],"names":["CreateButton","styled","button","JoinButton","HomeTheme","section","GameTheme","Landing","history","useHistory","routeChange","path","push","onClick","JoinInput","input","ScoreInput","axios","defaults","headers","get","baseurl","UpdateGame","gameID","gameState","url","post","game_id","game_state","then","res","data","catch","err","Promise","reject","JSON","stringify","GetGameState","Create","useState","player","setPlayer","gameId","setGameId","gameType","setGameType","useEffect","GenerateGameId","console","log","CreateAndRoute","game_type","CreateGame","pathname","state","placeholder","onChange","event","target","value","toUpperCase","ToggleButtonGroup","newGameType","exclusive","ToggleButton","Join","Lobby","useLocation","readableGameType","player1","setPlayer1","player2","setPlayer2","ready","setReady","playButton","ws","useRef","connURL","connectMessage","msg","current","WebSocket","onopen","send","onmessage","LobbyState","players","length","onclose","wsMessage","includes","startMessage","startGame","InitializeGame","PlayButton","DartGameStateActionTypes","handleUpdateGameState","dispatch","type","updateGameState","CricketTable","table","CricketHeader","th","CricketFooter","CricketRow","tr","CricketNumber","td","Cricket","initialState","setButton","otherPlayer","Total","Bull","useReducer","action","updateTargetValueByPlayerId","currentPlayer","playerId","modifiedPlayer","segment","buttonUpdate","newGameState","parse","score","parseInt","updateCricketState","updateMessage","iconSelection","map","renderCricketRow","FiveOneGame","FiveOneSection","span","FiveOneScore","label","FiveOneTable","Table","FiveOneHeader","TableHead","FiveOneRow","TableRow","FiveOneContainer","TableContainer","FiveOne","textScore","setTextScore","isNaN","Number","Moves","newTotal","updateFiveOneState","document","getElementById","renderFiveOneRow","rows","moves","i","TableCell","reverse","renderInput","id","stickyHeader","Game","App","basename","process","component","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.e893464c.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst CreateButton = styled.button`\n    color: #4fa1ee;\n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid#4fa1ee;\n    border-radius: 3px;\n`;\n\nconst JoinButton = styled.button`\n    color: #30e06b;\n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid #30e06b;\n    border-radius: 3px;\n`;\n\nexport { CreateButton, JoinButton };\n","import styled from 'styled-components';\n\nexport const HomeTheme = styled.section`\n    text-align: center;\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`;\n\nexport const GameTheme = styled.section`\n    text-align: center;\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: calc(10px + 2vmin);\n    //font-family: 'PressStart2P';\n    font-family: source-code-pro;\n    color: white;\n`;\n\nexport const JoinTheme = styled.section`\n    text-align: center;\n    background-color: #aac4f7;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: #030303;\n`;\n","import React from 'react';\nimport { CreateButton, JoinButton } from 'components/Buttons';\nimport { HomeTheme } from 'components/Themes';\nimport { useHistory } from 'react-router-dom';\n\nconst Landing = () => {\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push(path);\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <CreateButton onClick={() => routeChange('/create')}>\n                    Create Game\n                </CreateButton>\n            </div>\n\n            <div>\n                <JoinButton onClick={() => routeChange('/join')}>\n                    Join Game\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Landing;\n","import styled from 'styled-components';\n\nexport const JoinInput = styled.input`\n    font-size: 18px;\n    padding: 10px;\n    margin: 10px;\n    background: #b6b6b6;\n    border: none;\n    border-radius: 3px;\n    ::placeholder {\n        color: #666666;\n    }\n    text-transform: uppercase;\n`;\n\nexport const ScoreInput = styled.input`\n    font-size: 18px;\n    padding: 10px;\n    margin: 10px;\n    background: #b6b6b6;\n    border: none;\n    border-radius: 3px;\n    ::placeholder {\n        color: #666666;\n    }\n    text-transform: uppercase;\n`;\n","import axios, { AxiosResponse, AxiosError } from 'axios';\nimport { GameState } from 'hooks/useDartsGameState';\n\naxios.defaults.headers.get['Content-Type'] = 'application/json';\n\nconst baseurl = 'https://iukxdiz252.execute-api.us-east-1.amazonaws.com/dev';\n\nexport const GenerateGameId = () => {\n    let url = `${baseurl}/generateid`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const InitializeGame = (\n    gameID: string,\n    players: string[],\n    game_type: string,\n) => {\n    let url = `${baseurl}/initialize`;\n\n    return axios\n        .post(url, { game_id: gameID, players: players, game_type: game_type })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const CreateGame = (game_id: string, game_type: string) => {\n    let url = `${baseurl}/create`;\n\n    return axios\n        .post(url, { game_id: game_id, game_type: game_type })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const UpdateGame = (gameID: string, gameState: GameState) => {\n    let url = `${baseurl}/update`;\n\n    return axios\n        .post(url, { game_id: gameID, game_state: gameState })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const LobbyState = (gameID: string) => {\n    let url = `${baseurl}/lobby?game=${gameID}`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const GetGameState = (gameID: string) => {\n    let url = `${baseurl}/gamestate?game=${gameID}`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n","import React, { useState, useEffect } from 'react';\nimport { HomeTheme } from 'components/Themes';\nimport { JoinInput } from 'components/Inputs';\nimport { JoinButton } from 'components/Buttons';\nimport { useHistory } from 'react-router-dom';\nimport { GenerateGameId, CreateGame } from 'services/DartscoreService';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nconst Create = () => {\n    const history = useHistory();\n    const [player, setPlayer] = useState('');\n    const [gameId, setGameId] = useState('');\n    const [gameType, setGameType] = useState('cricket');\n\n    useEffect(() => {\n        if (!gameId) {\n            GenerateGameId().then((res) => {\n                const { game_id } = res;\n                if (!gameId) {\n                    setGameId(game_id);\n                    console.log(game_id);\n                }\n            });\n        }\n    }, [gameId]);\n\n    const CreateAndRoute = (path: string) => {\n        CreateGame(gameId, gameType).then(() => {\n            history.push({\n                pathname: path,\n                state: {\n                    gameID: gameId,\n                    player: player,\n                },\n            });\n        });\n    };\n\n    const handleChange = (event: object, newGameType: string) => {\n        setGameType(newGameType);\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <h2>Game Code: {gameId}</h2>\n            </div>\n            <div>\n                <label>Name</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter Your Name\"\n                    onChange={(event) =>\n                        setPlayer(event.target.value.toUpperCase())\n                    }\n                />\n            </div>\n            <div>\n                <ToggleButtonGroup\n                    value={gameType}\n                    onChange={handleChange}\n                    exclusive\n                >\n                    <ToggleButton value=\"cricket\">Cricket</ToggleButton>\n                    <ToggleButton value=\"fiveOhOne\">501</ToggleButton>\n                </ToggleButtonGroup>\n            </div>\n            <div>\n                <JoinButton onClick={() => CreateAndRoute('/lobby')}>\n                    Play\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Create;\n","import React, { useState } from 'react';\nimport { HomeTheme } from 'components/Themes';\nimport { JoinInput } from 'components/Inputs';\nimport { JoinButton } from 'components/Buttons';\nimport { useHistory } from 'react-router-dom';\n\nconst Join = () => {\n    const [gameId, setGameId] = useState('');\n    const [player, setPlayer] = useState('');\n    // will need to see if game is in progress or not to go to path\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push({\n            pathname: path,\n            state: {\n                gameID: gameId,\n                player: player,\n            },\n        });\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <label>Game Code</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter 4-Letter Code\"\n                    onChange={(event) =>\n                        setGameId(event.target.value.toUpperCase())\n                    }\n                />\n            </div>\n            <div>\n                <label>Name</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter Your Name\"\n                    onChange={(event) =>\n                        setPlayer(event.target.value.toUpperCase())\n                    }\n                />\n            </div>\n            <div>\n                <JoinButton onClick={() => routeChange('/lobby')}>\n                    Play\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Join;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { JoinButton } from 'components/Buttons';\nimport { HomeTheme } from 'components/Themes';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { LobbyState, InitializeGame } from 'services/DartscoreService';\n\ntype LobbyProps = {\n    gameID: string;\n    player: string;\n};\n\nconst Lobby = () => {\n    const { state } = useLocation<LobbyProps>();\n    const { gameID, player } = state;\n    const [gameType, setGameType] = useState('');\n    const readableGameType = gameType === 'cricket' ? 'Cricket' : ' 501';\n    const [player1, setPlayer1] = useState('');\n    const [player2, setPlayer2] = useState('');\n    const [ready, setReady] = useState(false);\n    const host = player === player1;\n    const playButton = ready && host;\n\n    const history = useHistory();\n\n    const ws = useRef<WebSocket>();\n    const connURL = `wss://cvc7ipmik7.execute-api.us-east-1.amazonaws.com/dev/?game=${gameID}&player=${player}`;\n\n    const connectMessage = {\n        game_id: gameID,\n        msg: 'I have connected',\n    };\n\n    // need to setup on message functionality and send message after connect\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                ws.current?.send(JSON.stringify(connectMessage));\n            }; //will add player to dict on open send message to all connectees\n            ws.current.onmessage = () => {\n                if (!ready) {\n                    LobbyState(gameID).then((res) => {\n                        const { players, game_type } = res;\n                        setGameType(game_type);\n                        if (!player1) {\n                            setPlayer1(players[0]['player']);\n                            console.log(player1);\n                        }\n                        if (players.length === 2 && !player2) {\n                            setPlayer2(players[1]['player']);\n                        }\n                    });\n                }\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections? and update them as well\n        }\n    });\n\n    useEffect(() => {\n        if (player1 && player2) {\n            setReady(true);\n        }\n    }, [player1, player2]);\n\n    useEffect(() => {\n        if (ready) {\n            // dont do this, this will just get triggered any time, do a check for the actual message.\n            ws.current.onmessage = (wsMessage) => {\n                console.log(wsMessage);\n                if (wsMessage.data.includes('start')) routeChange('/game');\n            };\n        }\n    });\n    // const Join = (path: string) => {\n    //     CreateGame(gameId).then(() => {\n    //         history.push({\n    //             pathname: path,\n    //             state: {\n    //                 gameID: gameId,\n    //                 player: player,\n    //             },\n    //         });\n    //     });\n    // };\n    const routeChange = (path: string) => {\n        history.push({\n            pathname: path,\n            state: {\n                gameID: gameID,\n                gameType: gameType,\n                player: player,\n                player1: player1,\n                player2: player2,\n                connURL: connURL,\n            },\n        });\n    };\n\n    const startMessage = {\n        game_id: gameID,\n        msg: 'start',\n    };\n    const players = [player1, player2];\n\n    const startGame = () => {\n        InitializeGame(gameID, players, gameType).then(() => {\n            ws.current?.send(JSON.stringify(startMessage));\n        });\n    };\n    const PlayButton = () => (\n        <div>\n            <JoinButton\n                onClick={() => {\n                    startGame();\n                }}\n            >\n                Play\n            </JoinButton>\n        </div>\n    );\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore Lobby: {gameID}</h1>\n                <h1>{readableGameType}</h1>\n            </div>\n            <div>\n                <h3>{player1}</h3>\n                <h3>{player2}</h3>\n            </div>\n            {playButton ? <PlayButton /> : null}\n        </HomeTheme>\n    );\n};\n\nexport default Lobby;\n","import { useReducer, Reducer, Dispatch } from 'react';\n\nexport interface GameState {\n    [key: string]: Target;\n}\nexport interface FiveOneState {\n    [key: string]: MoveTotal;\n}\n\nexport interface Target {\n    [key: string]: number;\n}\nexport interface MoveTotal {\n    [key: string]: number | number[];\n}\nexport enum DartGameStateActionTypes {\n    'updateTargetValueByPlayerId' = 'updateTargetValueByPlayerId',\n    'updateGameState' = 'updateGameState',\n}\n\nexport type DartGameStateActions =\n    | {\n          type: DartGameStateActionTypes.updateTargetValueByPlayerId;\n          playerId: string;\n          segment: string;\n      }\n    | { type: DartGameStateActionTypes.updateGameState; gameState: GameState };\n\nexport function useDartGameState(\n    initialState: GameState,\n): [GameState, Dispatch<DartGameStateActions>] {\n    const gameStateReducer = (\n        state: GameState,\n        action: DartGameStateActions,\n    ) => {\n        switch (action.type) {\n            case DartGameStateActionTypes.updateTargetValueByPlayerId:\n                const currentPlayer = state[action.playerId];\n                const modifiedPlayer = {\n                    ...state[action.playerId],\n                    [action.segment]: currentPlayer[action.segment]++,\n                };\n                return { ...state, [action.playerId]: modifiedPlayer };\n            case DartGameStateActionTypes.updateGameState:\n                return action.gameState;\n            default:\n                return state;\n        }\n    };\n    return useReducer<Reducer<GameState, DartGameStateActions>>(\n        gameStateReducer,\n        initialState,\n    );\n}\n\nexport function useFiveOneState(\n    initialState: FiveOneState,\n): [FiveOneState, Dispatch<DartGameStateActions>] {\n    const fiveOneStateReducer = (\n        state: FiveOneState,\n        action: DartGameStateActions,\n    ) => {\n        switch (action.type) {\n            case DartGameStateActionTypes.updateGameState:\n                return action.gameState;\n            default:\n                return state;\n        }\n    };\n    return useReducer<Reducer<FiveOneState, DartGameStateActions>>(\n        fiveOneStateReducer,\n        initialState,\n    );\n}\n\nexport function handleUpdateTargetValueByPlayerId({\n    dispatch,\n    playerId,\n    segment,\n}: {\n    dispatch: Dispatch<DartGameStateActions>;\n    playerId: string;\n    segment: string;\n}) {\n    return () => {\n        dispatch({\n            type: DartGameStateActionTypes.updateTargetValueByPlayerId,\n            playerId,\n            segment,\n        });\n    };\n}\n\nexport function handleUpdateGameState(\n    dispatch: Dispatch<DartGameStateActions>,\n) {\n    return (gameState: GameState) => {\n        dispatch({\n            type: DartGameStateActionTypes.updateGameState,\n            gameState,\n        });\n    };\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { UpdateGame, GetGameState } from 'services/DartscoreService';\nimport { updateCricketState } from 'hooks/updateDartState';\nimport {\n    handleUpdateGameState,\n    useDartGameState,\n} from 'hooks/useDartsGameState';\n\nconst CricketTable = styled.table`\n    border-collapse: collapse;\n    width: 100%;\n`;\n\nconst CricketHeader = styled.th`\n    padding: 10px;\n    border-bottom: 3px solid white;\n`;\n\nconst CricketFooter = styled.th`\n    padding: 10px;\n    border-top: 3px solid white;\n`;\n\nconst CricketRow = styled.tr`\n    height: 70px;\n`;\n\nconst CricketNumber = styled.td`\n    padding: 10px;\n    border-left: 3px solid white;\n    border-right: 3px solid white;\n`;\n\ntype CricketProps = {\n    gameID: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\nconst Cricket = ({\n    gameID,\n    player,\n    player1,\n    player2,\n    connURL,\n}: CricketProps) => {\n    const cricketRows = ['20', '19', '18', '17', '16', '15', 'Bull'];\n    const [button, setButton] = useState(false);\n    const otherPlayer = player === player1 ? player2 : player1;\n    const [gameState, dispatch] = useDartGameState({\n        [player1]: {\n            '15': 0,\n            '16': 0,\n            '17': 0,\n            '18': 0,\n            '19': 0,\n            '20': 0,\n            Total: 0,\n            Bull: 0,\n        },\n        [player2]: {\n            '15': 0,\n            '16': 0,\n            '17': 0,\n            '18': 0,\n            '19': 0,\n            '20': 0,\n            Total: 0,\n            Bull: 0,\n        },\n    });\n    const ws = useRef<WebSocket>();\n\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                });\n            };\n            ws.current.onmessage = (msg) => {\n                console.log(msg.data);\n                console.log(!msg.data.includes(player));\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                });\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections?\n\n            // if i send an update i dont update myself but my partner updates,\n            //then my partner sends an update because he updated and i update infinite loop\n        }\n    });\n\n    const buttonUpdate = (segment: string) => {\n        const newGameState = updateCricketState(\n            segment,\n            player,\n            otherPlayer,\n            gameState,\n        );\n        const updateMessage = {\n            game_id: gameID,\n            msg: player,\n        };\n        console.log('new game state');\n        console.log(newGameState);\n        UpdateGame(gameID, newGameState).then(() => {\n            ws.current.send(JSON.stringify(updateMessage));\n        });\n    };\n    const iconSelection = (score: number) => {\n        if (score === 0) {\n            return '';\n        }\n        if (score === 1) {\n            return `/`;\n        }\n        if (score === 2) {\n            return `x`;\n        }\n        if (score >= 3) {\n            return ` \\u24E7 `;\n        }\n    };\n    const renderCricketRow = (segment: string) => {\n        return (\n            <CricketRow>\n                <td>{iconSelection(gameState[player1][segment])}</td>\n                <CricketNumber>\n                    <button\n                        onClick={() => {\n                            buttonUpdate(segment);\n                            setButton(true);\n                        }}\n                    >\n                        {segment}\n                    </button>\n                </CricketNumber>\n                <td>{iconSelection(gameState[player2][segment])}</td>\n            </CricketRow>\n        );\n    };\n\n    return (\n        <CricketTable>\n            <tbody>\n                <CricketRow>\n                    <CricketHeader>{player1}</CricketHeader>\n                    <CricketHeader>VS</CricketHeader>\n                    <CricketHeader>{player2}</CricketHeader>\n                </CricketRow>\n                {cricketRows.map((segment) => renderCricketRow(segment))}\n                <CricketRow>\n                    <CricketFooter>{gameState[player1]['Total']}</CricketFooter>\n                    <CricketFooter></CricketFooter>\n                    <CricketFooter>{gameState[player2]['Total']}</CricketFooter>\n                </CricketRow>\n            </tbody>\n        </CricketTable>\n    );\n};\n\nexport default Cricket;\n","export interface GameState {\n    [key: string]: Target;\n}\n\nexport interface Target {\n    [key: string]: number;\n}\n\nexport interface FiveOneState {\n    [key: string]: MoveTotal;\n}\nexport interface MoveTotal {\n    [key: string]: number | number[];\n}\nexport function updateCricketState(\n    segment: string,\n    playerId: string,\n    otherPlayer: string,\n    gameState: GameState,\n) {\n    const newGameState = JSON.parse(JSON.stringify(gameState));\n    newGameState[playerId][segment]++;\n    if (\n        newGameState[playerId][segment] > 3 &&\n        newGameState[otherPlayer][segment] < 3\n    ) {\n        const score = segment === 'Bull' ? 25 : parseInt(segment);\n        newGameState[playerId]['Total'] += score;\n    }\n    return newGameState;\n}\n\nexport function updateFiveOneState(\n    score: number,\n    playerId: string,\n    //otherPlayer: string,\n    gameState: FiveOneState,\n) {\n    const newGameState = JSON.parse(JSON.stringify(gameState));\n    const invalidScores = [163, 166, 169, 172, 173, 175, 176, 178, 179];\n    if (invalidScores.includes(score) || score > 180 || score < 0) {\n        return newGameState;\n    }\n    var newTotal = newGameState[playerId]['Total'] - score;\n    if (newTotal < 0) {\n        // add functionality to handle busts and alert the user\n        return newGameState;\n    }\n    newGameState[playerId]['Total'] = newTotal;\n    newGameState[playerId]['Moves'].push(score);\n\n    return newGameState;\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { ScoreInput } from 'components/Inputs';\nimport { UpdateGame, GetGameState } from 'services/DartscoreService';\nimport { updateFiveOneState } from 'hooks/updateDartState';\nimport {\n    handleUpdateGameState,\n    useFiveOneState,\n} from 'hooks/useDartsGameState';\n\nconst FiveOneGame = styled.section`\n    //add legs\n    text-align: center;\n    background-color: #282c34;\n    justify-content: center;\n    display: flex;\n    flex-direction: row;\n    min-height: 50vh;\n    align-items: center;\n    font-size: calc(10px + 2vmin);\n    //font-family: 'PressStart2P';\n    font-family: source-code-pro;\n    color: white;\n`;\n\nconst PlayerDot = styled.span`\n    height: 25px;\n    width: 25px;\n    background-color: green;\n    border-radius: 50%;\n    display: inline-block;\n`;\n\nconst FiveOneSection = styled.section`\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n`;\nconst FiveOneScore = styled.label`\n    padding: 40px;\n    font-size: calc(150px + 2vmin);\n`;\n\nconst FiveOneTable = styled(Table)`\n    border-collapse: collapse;\n    width: 100%;\n`;\n\nconst FiveOneHeader = styled(TableHead)`\n    padding: 10px;\n    border-bottom: 3px solid white;\n`;\n\nconst FiveOneRow = styled(TableRow)`\n    // pull cricket row out into a separate component\n    height: 20px;\n`;\nconst FiveOneContainer = styled(TableContainer)`\n    // pull cricket row out into a separate component\n    height: 300px;\n`;\n\nconst FiveOneData = styled.td`\n    text-align: left;\n`;\n\ntype FiveOneProps = {\n    gameID: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\n\nconst FiveOne = ({\n    gameID,\n    player,\n    player1,\n    player2,\n    connURL,\n}: FiveOneProps) => {\n    const [textScore, setTextScore] = useState('');\n    const score = !isNaN(Number(textScore)) ? Number(textScore) : 0; // warn user invalid input\n\n    const [button, setButton] = useState(false);\n    const otherPlayer = player === player1 ? player2 : player1;\n    const [gameState, dispatch] = useFiveOneState({\n        [player1]: {\n            Total: 0,\n            Moves: [],\n        },\n        [player2]: {\n            Total: 0,\n            Moves: [],\n        },\n    });\n    const ws = useRef<WebSocket>();\n\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                });\n            };\n            ws.current.onmessage = (msg) => {\n                console.log(msg.data);\n                console.log(!msg.data.includes(player));\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                });\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections?\n\n            // if i send an update i dont update myself but my partner updates,\n            //then my partner sends an update because he updated and i update infinite loop\n        }\n    });\n    const buttonUpdate = () => {\n        if (!score) {\n            (document.getElementById('score') as HTMLInputElement).value = '';\n            return;\n        }\n        const newGameState = updateFiveOneState(score, player, gameState);\n        const updateMessage = {\n            game_id: gameID,\n            msg: player,\n        };\n        console.log('new game state');\n        console.log(newGameState);\n        (document.getElementById('score') as HTMLInputElement).value = '';\n        UpdateGame(gameID, newGameState).then(() => {\n            ws.current.send(JSON.stringify(updateMessage));\n        });\n    };\n    const renderFiveOneRow = (playerId: string) => {\n        var rows = [];\n        let moves = gameState[playerId]['Moves'] as number[];\n        for (var i = 0; i < moves.length; i++) {\n            rows.push(\n                <FiveOneRow>\n                    <TableCell>{(i + 1) * 3}</TableCell>\n                    <TableCell>{moves[i]}</TableCell>\n                </FiveOneRow>,\n            );\n        }\n        return rows.reverse();\n    };\n    const renderInput = (playerId: string) => {\n        // can add functionality to only allow scroe if its players turn\n        if (playerId === player) {\n            return (\n                <div>\n                    <ScoreInput\n                        placeholder=\"Score\"\n                        id=\"score\"\n                        onChange={(event) =>\n                            setTextScore(event.target.value.toUpperCase())\n                        }\n                    />\n                    <button onClick={buttonUpdate}>submit</button>\n                </div>\n            );\n        }\n    };\n\n    return (\n        <FiveOneGame>\n            <FiveOneSection>\n                <FiveOneHeader>Scoreboard</FiveOneHeader>\n                <FiveOneContainer>\n                    <FiveOneTable stickyHeader>\n                        {renderFiveOneRow(player1)}\n                    </FiveOneTable>\n                </FiveOneContainer>\n            </FiveOneSection>\n            <FiveOneSection>\n                <FiveOneScore>{gameState[player1]['Total']}</FiveOneScore>\n                <div>\n                    <label>{player1}</label>\n                    {renderInput(player1)}\n                </div>\n\n                {/* <PlayerDot></PlayerDot> */}\n            </FiveOneSection>\n            <FiveOneSection>\n                <FiveOneScore>{gameState[player2]['Total']}</FiveOneScore>\n                <label>{player2}</label>\n                {renderInput(player2)}\n            </FiveOneSection>\n            <FiveOneSection>\n                <FiveOneHeader>Scoreboard</FiveOneHeader>\n                <FiveOneContainer>\n                    <FiveOneTable stickyHeader>\n                        {renderFiveOneRow(player2)}\n                    </FiveOneTable>\n                </FiveOneContainer>\n            </FiveOneSection>\n        </FiveOneGame>\n    );\n};\n\nexport default FiveOne;\n","import React from 'react';\nimport { GameTheme } from 'components/Themes';\nimport { useLocation } from 'react-router-dom';\nimport Cricket from 'components/Cricket';\nimport FiveOne from 'components/FiveOne'; // make game render whichever based on mode selected from backend\n\ntype GameProps = {\n    gameID: string;\n    gameType: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\n\nconst Game = () => {\n    const { state } = useLocation<GameProps>();\n    const { gameID, gameType, player, player1, player2, connURL } = state;\n    if (gameType === 'cricket') {\n        return (\n            <GameTheme>\n                <div>\n                    <h2>Cricket</h2>\n                    <h3>Game Code: {gameID}</h3>\n                </div>\n                <div>\n                    <Cricket\n                        gameID={gameID}\n                        connURL={connURL}\n                        player={player}\n                        player1={player1}\n                        player2={player2}\n                    ></Cricket>\n                </div>\n            </GameTheme>\n        );\n    } else if (gameType === 'fiveOhOne') {\n        return (\n            <GameTheme>\n                <div>\n                    <h2>501</h2>\n                    <h3>Game Code: {gameID}</h3>\n                </div>\n                <div>\n                    <FiveOne\n                        gameID={gameID}\n                        connURL={connURL}\n                        player={player}\n                        player1={player1}\n                        player2={player2}\n                    ></FiveOne>\n                </div>\n            </GameTheme>\n        );\n    }\n};\n\nexport default Game;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Landing from './components/Landing';\nimport Create from './components/Create';\nimport Join from './components/Join';\nimport Lobby from './components/Lobby';\nimport Game from './components/Game';\nimport './App.css';\n\nconst App = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path=\"/\" component={Landing} exact />\n            <Route path=\"/join\" component={Join} exact />\n            <Route path=\"/create\" component={Create} exact />\n            <Route path=\"/lobby\" render={() => <Lobby />} exact />\n            <Route path=\"/game\" component={Game} exact />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/PressStart2P-Regular.5f45b521.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './fonts/PressStart2P-Regular.ttf';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}