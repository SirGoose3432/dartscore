{"version":3,"sources":["components/Buttons.tsx","components/Themes.tsx","components/Landing.tsx","components/Inputs.tsx","services/DartscoreService.ts","hooks/useDartsGameState.ts","components/Create.tsx","components/Join.tsx","components/Lobby.tsx","components/Cricket.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","fonts/PressStart2P-Regular.ttf","index.tsx"],"names":["CreateButton","styled","button","JoinButton","HomeTheme","section","GameTheme","Landing","history","useHistory","routeChange","path","push","onClick","JoinInput","input","axios","defaults","headers","get","DartGameStateActionTypes","baseurl","GetGameState","gameID","url","then","res","data","catch","err","Promise","reject","JSON","stringify","Create","useState","player","setPlayer","gameId","setGameId","useEffect","GenerateGameId","game_id","console","log","CreateAndRoute","post","CreateGame","pathname","state","placeholder","onChange","event","target","value","Join","Lobby","useLocation","player1","setPlayer1","player2","setPlayer2","ready","setReady","playButton","ws","useRef","connURL","connectMessage","msg","current","WebSocket","onopen","send","onmessage","LobbyState","players","length","onclose","wsMessage","includes","startMessage","startGame","game_type","InitializeGame","PlayButton","handleUpdateGameState","dispatch","gameState","type","updateGameState","CricketTable","table","CricketHeader","th","CricketFooter","CricketRow","tr","CricketNumber","td","Cricket","initialState","setButton","Total","Bull","useReducer","action","updateTargetValueByPlayerId","currentPlayer","playerId","modifiedPlayer","segment","game_state","updateMessage","UpdateGame","map","renderCricketRow","Game","App","basename","process","component","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17891325.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst CreateButton = styled.button`\n    color: #4fa1ee;\n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid#4fa1ee;\n    border-radius: 3px;\n`;\n\nconst JoinButton = styled.button`\n    color: #30e06b;\n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid #30e06b;\n    border-radius: 3px;\n`;\n\nexport { CreateButton, JoinButton };\n","import styled from 'styled-components';\n\nexport const HomeTheme = styled.section`\n    text-align: center;\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`;\n\nexport const GameTheme = styled.section`\n    text-align: center;\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: calc(10px + 2vmin);\n    //font-family: 'PressStart2P';\n    font-family: source-code-pro;\n    color: white;\n`;\n\nexport const JoinTheme = styled.section`\n    text-align: center;\n    background-color: #aac4f7;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: #030303;\n`;\n","import React from 'react';\nimport { CreateButton, JoinButton } from 'components/Buttons';\nimport { HomeTheme } from 'components/Themes';\nimport { useHistory } from 'react-router-dom';\n\nconst Landing = () => {\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push(path);\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <CreateButton onClick={() => routeChange('/create')}>\n                    Create Game\n                </CreateButton>\n            </div>\n\n            <div>\n                <JoinButton onClick={() => routeChange('/join')}>\n                    Join Game\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Landing;\n","import styled from 'styled-components';\n\nconst JoinInput = styled.input`\n    font-size: 18px;\n    padding: 10px;\n    margin: 10px;\n    background: #b6b6b6;\n    border: none;\n    border-radius: 3px;\n    ::placeholder {\n        color: #666666;\n    }\n`;\n\nexport { JoinInput };\n","import axios, { AxiosResponse, AxiosError } from 'axios';\nimport { GameState } from 'hooks/useDartsGameState';\n\naxios.defaults.headers.get['Content-Type'] = 'application/json';\n\nconst baseurl = 'https://iukxdiz252.execute-api.us-east-1.amazonaws.com/dev';\n\nexport const GenerateGameId = () => {\n    let url = `${baseurl}/generateid`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const InitializeGame = (\n    gameID: string,\n    players: string[],\n    game_type: string,\n) => {\n    let url = `${baseurl}/initialize`;\n\n    return axios\n        .post(url, { game_id: gameID, players: players, game_type: game_type })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const CreateGame = (game_id: string) => {\n    let url = `${baseurl}/create`;\n\n    return axios\n        .post(url, { game_id: game_id })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const UpdateGame = (gameID: string, gameState: GameState) => {\n    let url = `${baseurl}/update`;\n\n    return axios\n        .post(url, { game_id: gameID, game_state: gameState })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const LobbyState = (gameID: string) => {\n    let url = `${baseurl}/lobby?game=${gameID}`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const GetGameState = (gameID: string) => {\n    let url = `${baseurl}/gamestate?game=${gameID}`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n","import { useReducer, Reducer, Dispatch } from 'react';\n\nexport interface GameState {\n    [key: string]: Target;\n}\n\nexport interface Target {\n    [key: string]: number;\n}\n\nexport enum DartGameStateActionTypes {\n    'updateTargetValueByPlayerId' = 'updateTargetValueByPlayerId',\n    'updateGameState' = 'updateGameState',\n}\n\nexport type DartGameStateActions =\n    | {\n          type: DartGameStateActionTypes.updateTargetValueByPlayerId;\n          playerId: string;\n          segment: string;\n      }\n    | { type: DartGameStateActionTypes.updateGameState; gameState: GameState };\n\nexport function useDartGameState(\n    initialState: GameState,\n): [GameState, Dispatch<DartGameStateActions>] {\n    const gameStateReducer = (\n        state: GameState,\n        action: DartGameStateActions,\n    ) => {\n        switch (action.type) {\n            case DartGameStateActionTypes.updateTargetValueByPlayerId:\n                const currentPlayer = state[action.playerId];\n                const modifiedPlayer = {\n                    ...state[action.playerId],\n                    [action.segment]: currentPlayer[action.segment]++,\n                };\n                return { ...state, [action.playerId]: modifiedPlayer };\n            case DartGameStateActionTypes.updateGameState:\n                return action.gameState;\n            default:\n                return state;\n        }\n    };\n    return useReducer<Reducer<GameState, DartGameStateActions>>(\n        gameStateReducer,\n        initialState,\n    );\n}\n\nexport function handleUpdateTargetValueByPlayerId({\n    dispatch,\n    playerId,\n    segment,\n}: {\n    dispatch: Dispatch<DartGameStateActions>;\n    playerId: string;\n    segment: string;\n}) {\n    return () => {\n        dispatch({\n            type: DartGameStateActionTypes.updateTargetValueByPlayerId,\n            playerId,\n            segment,\n        });\n    };\n}\n\nexport function handleUpdateGameState(\n    dispatch: Dispatch<DartGameStateActions>,\n) {\n    return (gameState: GameState) => {\n        dispatch({\n            type: DartGameStateActionTypes.updateGameState,\n            gameState,\n        });\n    };\n}\n","import React, { useState, useEffect } from 'react';\nimport { HomeTheme } from 'components/Themes';\nimport { JoinInput } from 'components/Inputs';\nimport { JoinButton } from 'components/Buttons';\nimport { useHistory } from 'react-router-dom';\nimport { GenerateGameId, CreateGame } from 'services/DartscoreService';\n\nconst Create = () => {\n    const history = useHistory();\n    const [player, setPlayer] = useState('');\n    const [gameId, setGameId] = useState('');\n\n    useEffect(() => {\n        if (!gameId) {\n            GenerateGameId().then((res) => {\n                const { game_id } = res;\n                if (!gameId) {\n                    setGameId(game_id);\n                    console.log(game_id);\n                }\n            });\n        }\n    }, [gameId]);\n\n    const CreateAndRoute = (path: string) => {\n        CreateGame(gameId).then(() => {\n            history.push({\n                pathname: path,\n                state: {\n                    gameID: gameId,\n                    player: player,\n                },\n            });\n        });\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <h2>Game Code: {gameId}</h2>\n            </div>\n            <div>\n                <label>Name</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter Your Name\"\n                    onChange={(event) => setPlayer(event.target.value)}\n                />\n            </div>\n            <div>\n                <JoinButton onClick={() => CreateAndRoute('/lobby')}>\n                    Play\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Create;\n","import React, { useState } from 'react';\nimport { HomeTheme } from 'components/Themes';\nimport { JoinInput } from 'components/Inputs';\nimport { JoinButton } from 'components/Buttons';\nimport { useHistory } from 'react-router-dom';\n\nconst Join = () => {\n    const [gameId, setGameId] = useState('');\n    const [player, setPlayer] = useState('');\n    // will need to see if game is in progress or not to go to path\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push({\n            pathname: path,\n            state: {\n                gameID: gameId,\n                player: player,\n            },\n        });\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <label>Game Code</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter 4-Letter Code\"\n                    onChange={(event) => setGameId(event.target.value)}\n                />\n            </div>\n            <div>\n                <label>Name</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter Your Name\"\n                    onChange={(event) => setPlayer(event.target.value)}\n                />\n            </div>\n            <div>\n                <JoinButton onClick={() => routeChange('/lobby')}>\n                    Play\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Join;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { JoinButton } from 'components/Buttons';\nimport { HomeTheme } from 'components/Themes';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { LobbyState, InitializeGame } from 'services/DartscoreService';\n\ntype LobbyProps = {\n    gameID: string;\n    player: string;\n};\n\nconst Lobby = () => {\n    const { state } = useLocation<LobbyProps>();\n    const { gameID, player } = state;\n    const [player1, setPlayer1] = useState('');\n    const [player2, setPlayer2] = useState('');\n    const [ready, setReady] = useState(false);\n    const host = player === player1;\n    const playButton = ready && host;\n\n    const history = useHistory();\n\n    const ws = useRef<WebSocket>();\n    const connURL = `wss://cvc7ipmik7.execute-api.us-east-1.amazonaws.com/dev/?game=${gameID}&player=${player}`;\n\n    const connectMessage = {\n        game_id: gameID,\n        msg: 'I have connected',\n    };\n\n    // need to setup on message functionality and send message after connect\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                ws.current?.send(JSON.stringify(connectMessage));\n            }; //will add player to dict on open send message to all connectees\n            ws.current.onmessage = () => {\n                if (!ready) {\n                    LobbyState(gameID).then((res) => {\n                        const { players } = res;\n                        if (!player1) {\n                            setPlayer1(players[0]['player']);\n                            console.log(player1);\n                        }\n                        if (players.length === 2 && !player2) {\n                            setPlayer2(players[1]['player']);\n                        }\n                    });\n                }\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections? and update them as well\n        }\n    });\n\n    useEffect(() => {\n        if (player1 && player2) {\n            setReady(true);\n        }\n    }, [player1, player2]);\n\n    useEffect(() => {\n        if (ready) {\n            // dont do this, this will just get triggered any time, do a check for the actual message.\n            ws.current.onmessage = (wsMessage) => {\n                console.log(wsMessage);\n                if (wsMessage.data.includes('start')) routeChange('/game');\n            };\n        }\n    });\n    // const Join = (path: string) => {\n    //     CreateGame(gameId).then(() => {\n    //         history.push({\n    //             pathname: path,\n    //             state: {\n    //                 gameID: gameId,\n    //                 player: player,\n    //             },\n    //         });\n    //     });\n    // };\n    const routeChange = (path: string) => {\n        history.push({\n            pathname: path,\n            state: {\n                gameID: gameID,\n                player: player,\n                player1: player1,\n                player2: player2,\n                connURL: connURL,\n            },\n        });\n    };\n\n    const startMessage = {\n        game_id: gameID,\n        msg: 'start',\n    };\n    const players = [player1, player2];\n\n    const startGame = () => {\n        InitializeGame(gameID, players, 'cricket');\n        ws.current?.send(JSON.stringify(startMessage));\n    };\n    const PlayButton = () => (\n        <div>\n            <JoinButton\n                onClick={() => {\n                    startGame();\n                }}\n            >\n                Play\n            </JoinButton>\n        </div>\n    );\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore Lobby: {gameID}</h1>\n            </div>\n            <div>\n                <h2>{player1}</h2>\n            </div>\n            <div>\n                <h2>{player2}</h2>\n            </div>\n            {playButton ? <PlayButton /> : null}\n        </HomeTheme>\n    );\n};\n\nexport default Lobby;\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { UpdateGame, GetGameState } from 'services/DartscoreService';\nimport {\n    DartGameStateActionTypes,\n    handleUpdateGameState,\n    useDartGameState,\n} from 'hooks/useDartsGameState';\n\nconst CricketTable = styled.table`\n    border-collapse: collapse;\n    width: 100%;\n`;\n\nconst CricketHeader = styled.th`\n    padding: 10px;\n    border-bottom: 3px solid white;\n`;\n\nconst CricketFooter = styled.th`\n    padding: 10px;\n    border-top: 3px solid white;\n`;\n\nconst CricketRow = styled.tr`\n    height: 70px;\n`;\n\nconst CricketNumber = styled.td`\n    padding: 10px;\n    border-left: 3px solid white;\n    border-right: 3px solid white;\n`;\n\ntype CricketProps = {\n    gameID: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\nconst Cricket = ({\n    gameID,\n    player,\n    player1,\n    player2,\n    connURL,\n}: CricketProps) => {\n    const cricketRows = ['20', '19', '18', '17', '16', '15', 'Bull'];\n    const [button, setButton] = useState(false);\n    const [gameState, dispatch] = useDartGameState({\n        [player1]: {\n            '15': 0,\n            '16': 0,\n            '17': 0,\n            '18': 0,\n            '19': 0,\n            '20': 0,\n            Total: 0,\n            Bull: 0,\n        },\n        [player2]: {\n            '15': 0,\n            '16': 0,\n            '17': 0,\n            '18': 0,\n            '19': 0,\n            '20': 0,\n            Total: 0,\n            Bull: 0,\n        },\n    });\n    const ws = useRef<WebSocket>();\n\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    handleUpdateGameState(dispatch)(game_state);\n                });\n            };\n            ws.current.onmessage = (msg) => {\n                console.log(msg.data);\n                console.log(!msg.data.includes(player));\n                //if (!msg.data.includes(player)) {\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n\n                    handleUpdateGameState(dispatch)(game_state);\n                });\n                //}\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections?\n\n            // if i send an update i dont update myself but my partner updates,\n            //then my partner sends an update because he updated and i update infinite loop\n        }\n    });\n    useEffect(() => {\n        if (button) {\n            const updateMessage = {\n                game_id: gameID,\n                msg: player,\n            };\n            UpdateGame(gameID, gameState).then(() => {\n                setButton(false);\n                ws.current.send(JSON.stringify(updateMessage));\n            });\n        }\n    }, [gameState, button, gameID, player]);\n\n    const renderCricketRow = (segment: string) => {\n        return (\n            <CricketRow>\n                <td>{gameState[player1][segment]}</td>\n                <CricketNumber>\n                    <button\n                        onClick={() => {\n                            setButton(true);\n                            dispatch({\n                                type:\n                                    DartGameStateActionTypes.updateTargetValueByPlayerId,\n                                playerId: player,\n                                segment: segment,\n                            });\n                        }}\n                    >\n                        {segment}\n                    </button>\n                </CricketNumber>\n                <td>{gameState[player2][segment]}</td>\n            </CricketRow>\n        );\n    };\n\n    return (\n        <CricketTable>\n            <tbody>\n                <CricketRow>\n                    <CricketHeader>{player1}</CricketHeader>\n                    <CricketHeader>VS</CricketHeader>\n                    <CricketHeader>{player2}</CricketHeader>\n                </CricketRow>\n                {cricketRows.map((segment) => renderCricketRow(segment))}\n                <CricketRow>\n                    <CricketFooter>{gameState[player1]['Total']}</CricketFooter>\n                    <CricketFooter></CricketFooter>\n                    <CricketFooter>{gameState[player2]['Total']}</CricketFooter>\n                </CricketRow>\n            </tbody>\n        </CricketTable>\n    );\n};\n\nexport default Cricket;\n","import React from 'react';\nimport { GameTheme } from 'components/Themes';\nimport { useLocation } from 'react-router-dom';\nimport Cricket from 'components/Cricket';\n//import FiveOne from 'components/FiveOne'; // make game render whichever based on mode selected from backend\n\ntype GameProps = {\n    gameID: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\n\nconst Game = () => {\n    const { state } = useLocation<GameProps>();\n    const { gameID, player, player1, player2, connURL } = state;\n\n    return (\n        <GameTheme>\n            <div>\n                <h2>Cricket</h2>\n                <h3>Game Code: {gameID}</h3>\n            </div>\n            <div>\n                <Cricket\n                    gameID={gameID}\n                    connURL={connURL}\n                    player={player}\n                    player1={player1}\n                    player2={player2}\n                ></Cricket>\n            </div>\n        </GameTheme>\n    );\n};\n\nexport default Game;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Landing from './components/Landing';\nimport Create from './components/Create';\nimport Join from './components/Join';\nimport Lobby from './components/Lobby';\nimport Game from './components/Game';\nimport './App.css';\n\nconst App = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path=\"/\" component={Landing} exact />\n            <Route path=\"/join\" component={Join} exact />\n            <Route path=\"/create\" component={Create} exact />\n            <Route path=\"/lobby\" render={() => <Lobby />} exact />\n            <Route path=\"/game\" component={Game} exact />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/PressStart2P-Regular.5f45b521.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './fonts/PressStart2P-Regular.ttf';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}